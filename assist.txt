rails server // rails s
rails generate contoller pages
rails generate migration create_articles
rails db:migrate
rails db:rollback
rails console // rails c
Article.all // all articles
Article.create(title: "first article", description: "description of first article")
article = Article.new // model  
article.title = "second article"
article.description = "description of second article"
article.save
article = Article.new(title: "third article", description: "description of third articl
") // then save it
exit // to exit from rails console
ctrl + l // takes you to top of rails console same as clear
Article.find(2) // find by id
Article.first // first article
Article.last // last article
articles = Article.all // all articles in array
article = Article.find(2)
article.title // logs title
article.title = "updated second article" // follow up with article.save to save changes to database
article = Article.last
article.destroy // hits the database
reload! // inside rails console to update it acc to changes in modal
article.errors // to get errors while saving it to database
// note that attempt must be made to save to populate errors
article.errors.full_messages // to get redeable message of errors
// ["Title can't be blank", "Description can't be blank"]
rails routes
rails routes --expanded
byebug // to stop execution
// type continue in console to continue execution


// inside the rails console
article.errors.full_messages.each do |msg|
    puts msg
end
// on subsequent lines

bundle install --without production // if changes made to gem file, changes will be reflected in gemfile.lock

// after cloning files from github we did
bundle install
yarn install --check-files
rails db:migrate RAILS_ENV=development

// when we make an error in form input, rails wraps label and inputs which are wrong with 
// a div having class "field_with_errors", thats the reason inline input field style gets messed up
// you can either disable it or define a styling for it
// for disabling it go to config/environment.rb // add following lines
// and restart server for changes to take effect
ActionView::Base.field_error_proc = Proc.new do |html_tag, instance|
  html_tag.html_safe
end


rails generate scaffold User username:string
rails db:migrate
rails generate migration add_user_id_to_articles
rails db:migrate
// go to rails console
// reload it 
reload!
Article.all
// all articles will have user_id field with value nil

// add the following
has_many :articles // to user.rb
belongs_to :user // to article.rb
// then run User.articles in console, it will return #<ActiveRecord::Associations::CollectionProxy []>

// forming association from article to user
Article.create(
  title: "some articles",
  description: "descrption of some article",
  user_id: User.first.id // or just 'user: User.first'
) // creates article with user_id of first user
User.first.articles // returns the articles of that user


// forming association from user to article
user1 = User.first
user1.articles.build(title: "some new article", description: "article created directly by user")
article = _               // this assigns previously returned value to article
// now article points to article created by user1 now simply save it
article.save

// using showell operator
user2 = User.last
article = Article.first // article not associated to any user
user2.articles << article